{"version":3,"sources":["components/Help.jsx","components/PooingEmoji.jsx","components/Footer.jsx","config.js","assets/farts/farts.js","assets/farts/dry-fart.mp3","assets/farts/09037.mp3","assets/farts/fart-sound.mp3","assets/farts/perfect-fart.mp3","App.js","serviceWorker.js","index.js"],"names":["Help","openHelp","animateHelpClass","className","onClick","role","aria-label","PooingEmoji","animatePushClass","animatePooClass","selectedEmoji","doFart","Footer","config","Object","freeze","POO_LIMIT","EMOJIS","farts","getRandomEmoji","Math","floor","random","length","getPooLimit","limit","console","log","App","useState","isUiFrozen","setIsUiFrozen","setSelectedEmoji","setLimit","counter","setCounter","setAnimatePooClass","setAnimatePushClass","setAnimateHelpClass","doPoo","Promise","resolve","reject","timeout","setTimeout","clearTimeout","useEffect","a","newEmoji","counterCheck","Audio","play","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4ca3eff3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Help.css\";\n\nconst Help = ({ openHelp, animateHelpClass }) => (\n  <div className=\"help\" onClick={openHelp}>\n    <span role=\"img\" aria-label=\"Question mark emoji\">\n      ‚ùì\n    </span>\n    <span className={`text ${animateHelpClass ? \"animate\" : \"\"}`}>\n      Just push the animal{\" \"}\n      <span role=\"img\" aria-label=\"Pointing hand emoji\">\n        üëâ\n      </span>\n    </span>\n  </div>\n);\n\nexport default Help;\n","import React from \"react\";\nimport \"./PooingEmoji.css\";\n\nconst PooingEmoji = ({\n  animatePushClass,\n  animatePooClass,\n  selectedEmoji,\n  doFart\n}) => {\n  return (\n    <div\n      className={`button ${animatePushClass ? \"animate\" : \"\"}`}\n      onClick={doFart}\n    >\n      <span\n        className={`poo ${animatePooClass ? \"animate\" : \"\"}`}\n        role=\"img\"\n        aria-label=\"Poo emoji\"\n      >\n        üí©\n      </span>\n      <span role=\"img\" aria-label=\"Random animal emoji\">\n        {selectedEmoji}\n      </span>\n    </div>\n  );\n};\n\nexport default PooingEmoji;\n","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => (\n  <span className=\"footer\">\n    Background photo by Courtney Kenady on Unsplash\n    <br />\n    Farts from www.myinstants.com\n  </span>\n);\n\nexport default Footer;\n","const config = Object.freeze({\n  POO_LIMIT: 100,\n  EMOJIS: [\"ü¶ã\", \"üêõ\", \"üêà\", \"ü¶Ü\", \"üêí\", \"üê¢\", \"ü¶©\", \"ü¶í\", \"üêÄ\", \"ü¶î\"]\n});\n\nexport default config;\n","import fart1 from './dry-fart.mp3';\nimport fart2 from './09037.mp3';\nimport fart3 from './fart-sound.mp3';\nimport fart4 from './perfect-fart.mp3';\n\nconst farts = [fart1, fart2, fart3, fart4];\nconst getRandomFart = () => farts[Math.floor(Math.random() * farts.length)];\n\nexport { getRandomFart };\n","export default __webpack_public_path__ + \"static/media/dry-fart.a26510f2.mp3\";","export default __webpack_public_path__ + \"static/media/09037.f0cc9546.mp3\";","export default __webpack_public_path__ + \"static/media/fart-sound.e78f9c37.mp3\";","export default __webpack_public_path__ + \"static/media/perfect-fart.e4945696.mp3\";","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Help from \"./components/Help\";\nimport PooingEmoji from \"./components/PooingEmoji\";\nimport Footer from \"./components/Footer\";\nimport config from \"./config\";\nimport { getRandomFart } from \"./assets/farts/farts\";\n\nconst getRandomEmoji = () =>\n  config.EMOJIS[Math.floor(Math.random() * config.EMOJIS.length)];\nconst getPooLimit = () => {\n  const limit = Math.floor(Math.random() * config.POO_LIMIT) + 1;\n  console.log(`LIMIT: ${limit}`);\n  return limit;\n};\n\nconst App = () => {\n  const [isUiFrozen, setIsUiFrozen] = useState(false);\n  const [selectedEmoji, setSelectedEmoji] = useState(null);\n  const [limit, setLimit] = useState(null);\n  const [counter, setCounter] = useState(0);\n  const [animatePooClass, setAnimatePooClass] = useState(false);\n  const [animatePushClass, setAnimatePushClass] = useState(false);\n  const [animateHelpClass, setAnimateHelpClass] = useState(false);\n\n  const doPoo = () =>\n    new Promise((resolve, reject) => {\n      console.log(\"POOOOO\");\n      setAnimatePooClass(true);\n      const timeout = setTimeout(() => {\n        setAnimatePooClass(false);\n        clearTimeout(timeout);\n        resolve();\n      }, 2000);\n    });\n\n  const doFart = () => {\n    if (isUiFrozen) return;\n    setAnimatePushClass(true);\n    const timeout = setTimeout(() => {\n      setAnimatePushClass(false);\n      clearTimeout(timeout);\n    }, 200);\n    setCounter(counter + 1);\n    const fartSound = new Audio(getRandomFart());\n    fartSound.play();\n  };\n\n  const openHelp = () => {\n    setAnimateHelpClass(true);\n    const timeout = setTimeout(() => {\n      setAnimateHelpClass(false);\n      clearTimeout(timeout);\n    }, 5000);\n  };\n\n  useEffect(() => {\n    setLimit(getPooLimit());\n    setSelectedEmoji(getRandomEmoji());\n  }, []);\n\n  useEffect(() => {\n    async function counterCheck() {\n      setIsUiFrozen(true);\n      console.log(`COUNTER: ${counter}`);\n      if (counter === limit) {\n        let newEmoji = getRandomEmoji();\n        await doPoo();\n        setCounter(0);\n        setLimit(getPooLimit());\n        while (newEmoji === selectedEmoji) newEmoji = getRandomEmoji();\n        setSelectedEmoji(newEmoji);\n      }\n      setIsUiFrozen(false);\n    }\n    counterCheck();\n  }, [counter, limit, selectedEmoji]);\n\n  return (\n    <div className=\"App\">\n      <Help openHelp={openHelp} animateHelpClass={animateHelpClass} />\n      <PooingEmoji\n        animatePushClass={animatePushClass}\n        animatePooClass={animatePooClass}\n        selectedEmoji={selectedEmoji}\n        doFart={doFart}\n      />\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}